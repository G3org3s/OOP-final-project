package org.example;
import java.io.IOException;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.TreeMap;

public abstract class Account {
    protected String accountId; //accounts can have matching IDs as I want this to be inputted by user,
                                // since the user might want to use the actual ID of his account from the bank for example
    protected TreeMap<String, Security> holdings;

    public Account(String accountId) {
        this.accountId = accountId;
        this.holdings = new TreeMap<>();
    }

    /**
     * adds a security to the account map
     * @param security the security to add
     */
    public void addSecurity(Security security) {
        if (holdings.containsKey(security.getTicker())) {
            double existingShareCount = holdings.get(security.getTicker()).getShareCount();
            double existingOriginalPrice = holdings.get(security.getTicker()).getOriginalPrice();

            security.setOriginalPrice((existingOriginalPrice * existingShareCount + security.getOriginalPrice() * security.getShareCount()) /
                    (existingOriginalPrice + security.getShareCount()));
            security.setShareCount((int) (existingShareCount + security.getShareCount()));
        }
        holdings.put(security.getTicker(), security);
    }

    /**
     * Calculates the total market value of all securities in this account.
     * @return the current market value of the portfolio.
     */
    public double getPortfolioMarketValue() {
        double totalValue = 0;
        for (Security security : holdings.values()) {
            totalValue += security.getMarketValue();
        }
        return totalValue;
    }

    /**
     * Calculates the total absolute profit across all securities after a given number of years,
     * based on their individual growth assumptions.
     * @return the total profit (or loss if negative) generated by an account
     */
    public double getTotalProfit() {
        double originalValue = 0;
        for (Security security : holdings.values()) {
            originalValue += security.getOriginalPrice() * security.getShareCount();
        }
        return getPortfolioMarketValue() - originalValue;
    }

    public String getAccountId() {
        return accountId;
    }

    public void setAccountId(String accountId) {
        this.accountId = accountId;
    }

    public Map<String, Security> getHoldings() {
        return holdings;
    }

    public void setHoldings(TreeMap<String, Security> holdings) {
        this.holdings = holdings;
    }

    // Inner Comparator class for Account
    public static class AccountComparator implements Comparator<Account> {

        public AccountComparator() {
        }

        /**
         * Compares accounts based on the total profit earned
         * @param a1 the first object to be compared.
         * @param a2 the second object to be compared.
         * @return accounts in descending order
         */
        @Override
        public int compare(Account a1, Account a2) {
            return Double.compare(a2.getTotalProfit(), a1.getTotalProfit()); // descending order
        }
    }
}

